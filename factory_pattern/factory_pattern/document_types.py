"""Document type implementations."""

from enum import Enum
from datetime import datetime
from .document import Document


class DocumentType(Enum):
    """Enumeration of supported document types."""
    PDF = "pdf"
    WORD = "word"
    HTML = "html"
    MARKDOWN = "markdown"
    TEXT = "text"


class PDFDocument(Document):
    """
    Concrete Product: PDF Document implementation.
    """

    def __init__(self, title: str, author: str, content: str = ""):
        """
        Initialize a PDF document.

        Args:
            title: The title of the document
            author: The author of the document
            content: The content of the document (default is empty string)
        """
        super().__init__(title, author, content)
        self.add_metadata("format", "PDF")
        self.add_metadata("version", "1.7")

    def create(self) -> str:
        """Create a PDF document."""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        return "\n".join(
            [
                "PDF Document",
                "=" * 20,
                f"Title: {self.title}",
                f"Created: {timestamp}",
                "-" * 20,
                self.content,
                "-" * 20,
            ]
        )

    def generate(self) -> str:
        """
        Generate a PDF document.

        Returns:
            str: A string representation of the PDF document (for demonstration)
        """
        header = "%PDF-1.7\n% Generated by Factory Pattern Demo\n"

        # In a real implementation, this would generate actual PDF content
        body = (
            "1 0 obj\n"
            "<<\n"
            "/Type /Catalog\n"
            "/Pages 2 0 R\n"
            ">>\n"
            "endobj\n"
            "2 0 obj\n"
            "<<\n"
            "/Type /Pages\n"
            "/Kids [3 0 R]\n"
            "/Count 1\n"
            ">>\n"
            "endobj\n"
            "3 0 obj\n"
            "<<\n"
            "/Type /Page\n"
            "/Parent 2 0 R\n"
            "/Resources <<\n"
            "/Font <<\n"
            "/F1 4 0 R\n"
            ">>\n"
            ">>\n"
            "/MediaBox [0 0 612 792]\n"
            "/Contents 5 0 R\n"
            ">>\n"
            "endobj\n"
            "4 0 obj\n"
            "<<\n"
            "/Type /Font\n"
            "/Subtype /Type1\n"
            "/Name /F1\n"
            "/BaseFont /Helvetica\n"
            ">>\n"
            "endobj\n"
            "5 0 obj\n"
            "<< /Length 123 >>\n"
            "stream\n"
            "BT\n"
            "/F1 24 Tf\n"
            "100 700 Td\n"
            f"({self.title}) Tj\n"
            "0 -36 Td\n"
            f"({self.author}) Tj\n"
            "0 -36 Td\n"
            f"({self.content}) Tj\n"
            "ET\n"
            "endstream\n"
            "endobj\n"
        )

        trailer = (
            "trailer\n"
            "<<\n"
            "/Size 6\n"
            "/Root 1 0 R\n"
            ">>\n"
            "startxref\n"
            "0\n"
            "%%EOF"
        )

        return f"{header}{body}{trailer}"

    def save(self, path: str) -> bool:
        """
        Save the PDF document to a file.

        Args:
            path: The path where to save the document

        Returns:
            bool: True if the document was saved successfully, False otherwise
        """
        try:
            # Ensure path has .pdf extension
            if not path.lower().endswith(".pdf"):
                path += ".pdf"

            with open(path, "w") as file:
                file.write(self.generate())
            return True
        except Exception as e:
            print(f"Error saving PDF document: {e}")
            return False


class WordDocument(Document):
    """
    Concrete Product: Word Document implementation.
    """

    def __init__(self, title: str, author: str, content: str = ""):
        """
        Initialize a Word document.

        Args:
            title: The title of the document
            author: The author of the document
            content: The content of the document (default is empty string)
        """
        super().__init__(title, author, content)
        self.add_metadata("format", "DOCX")
        self.add_metadata("version", "Office Open XML")

    def create(self) -> str:
        """Create a Word document."""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        return "\n".join(
            [
                "Word Document",
                "=" * 20,
                f"Title: {self.title}",
                f"Created: {timestamp}",
                "-" * 20,
                self.content,
                "-" * 20,
            ]
        )

    def generate(self) -> str:
        """
        Generate a Word document.

        Returns:
            str: An XML representation of a Word document (for demonstration)
        """
        # In a real implementation, this would generate actual DOCX content
        xml = (
            '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>\n'
            '<w:document xmlns:w="http://schemas.openxmlformats.org/'
            'wordprocessingml/2006/main">\n'
            "  <w:body>\n"
            "    <w:p>\n"
            "      <w:pPr>\n"
            '        <w:pStyle w:val="Title"/>\n'
            "      </w:pPr>\n"
            "      <w:r>\n"
            f"        <w:t>{self.title}</w:t>\n"
            "      </w:r>\n"
            "    </w:p>\n"
            "    <w:p>\n"
            "      <w:pPr>\n"
            '        <w:pStyle w:val="Subtitle"/>\n'
            "      </w:pPr>\n"
            "      <w:r>\n"
            f"        <w:t>{self.author}</w:t>\n"
            "      </w:r>\n"
            "    </w:p>\n"
            "    <w:p>\n"
            "      <w:r>\n"
            f"        <w:t>{self.content}</w:t>\n"
            "      </w:r>\n"
            "    </w:p>\n"
            "  </w:body>\n"
            "</w:document>"
        )
        return xml

    def save(self, path: str) -> bool:
        """
        Save the Word document to a file.

        Args:
            path: The path where to save the document

        Returns:
            bool: True if the document was saved successfully, False otherwise
        """
        try:
            # Ensure path has .docx extension
            if not path.lower().endswith(".docx"):
                path += ".docx"

            with open(path, "w") as file:
                file.write(self.generate())
            return True
        except Exception as e:
            print(f"Error saving Word document: {e}")
            return False


class HTMLDocument(Document):
    """
    Concrete Product: HTML Document implementation.
    """

    def __init__(self, title: str, author: str, content: str = ""):
        """
        Initialize an HTML document.

        Args:
            title: The title of the document
            author: The author of the document
            content: The content of the document (default is empty string)
        """
        super().__init__(title, author, content)
        self.add_metadata("format", "HTML")
        self.add_metadata("version", "HTML5")
        self.css = ""

    def set_css(self, css: str) -> None:
        """
        Set CSS for the HTML document.

        Args:
            css: CSS styles as a string
        """
        self.css = css

    def create(self) -> str:
        """Create an HTML document."""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        return "\n".join(
            [
                "<!DOCTYPE html>",
                "<html>",
                "<head>",
                f"<title>{self.title}</title>",
                "</head>",
                "<body>",
                f"<h1>{self.title}</h1>",
                f"<p>Created: {timestamp}</p>",
                f"<div>{self.content}</div>",
                "</body>",
                "</html>",
            ]
        )

    def generate(self) -> str:
        """
        Generate an HTML document.

        Returns:
            str: An HTML document as a string
        """
        html = (
            f"<!DOCTYPE html>\n"
            f'<html lang="en">\n'
            f"<head>\n"
            f'    <meta charset="UTF-8">\n'
            f'    <meta name="viewport" '
            f'content="width=device-width, initial-scale=1.0">\n'
            f'    <meta name="author" content="{self.author}">\n'
            f"    <title>{self.title}</title>\n"
        )

        if self.css:
            html += f"    <style>\n{self.css}\n    </style>\n"

        html += (
            f"</head>\n"
            f"<body>\n"
            f"    <header>\n"
            f"        <h1>{self.title}</h1>\n"
            f'        <p class="author">By {self.author}</p>\n'
            f"    </header>\n"
            f"    <main>\n"
            f'        <div class="content">\n'
            f"            {self.content}\n"
            f"        </div>\n"
            f"    </main>\n"
            f"    <footer>\n"
            f"        <p>Generated with Factory Pattern Demo</p>\n"
            f"    </footer>\n"
            f"</body>\n"
            f"</html>"
        )

        return html

    def save(self, path: str) -> bool:
        """
        Save the HTML document to a file.

        Args:
            path: The path where to save the document

        Returns:
            bool: True if the document was saved successfully, False otherwise
        """
        try:
            # Ensure path has .html extension
            if not path.lower().endswith((".html", ".htm")):
                path += ".html"

            with open(path, "w") as file:
                file.write(self.generate())
            return True
        except Exception as e:
            print(f"Error saving HTML document: {e}")
            return False


class MarkdownDocument(Document):
    """Markdown document implementation."""

    def create(self) -> str:
        """Create a Markdown document."""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        return "\n".join(
            [
                f"# {self.title}",
                "",
                f"Created: {timestamp}",
                "",
                self.content,
            ]
        )


class TextDocument(Document):
    """Plain text document implementation."""

    def create(self) -> str:
        """Create a plain text document."""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        return "\n".join(
            [
                self.title.upper(),
                "=" * len(self.title),
                f"Created: {timestamp}",
                "",
                self.content,
            ]
        )
