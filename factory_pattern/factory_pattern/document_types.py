import os
from factory_pattern.document import Document


class PDFDocument(Document):
    """
    Concrete Product: PDF Document implementation.
    """
    def __init__(self, title: str, author: str, content: str = ""):
        """
        Initialize a PDF document.
        
        Args:
            title: The title of the document
            author: The author of the document
            content: The content of the document (default is empty string)
        """
        super().__init__(title, author, content)
        self.add_metadata("format", "PDF")
        self.add_metadata("version", "1.7")
    
    def generate(self) -> str:
        """
        Generate a PDF document.
        
        Returns:
            str: A string representation of the PDF document (for demonstration)
        """
        header = f"%PDF-1.7\n% Generated by Factory Pattern Demo\n"
        
        # In a real implementation, this would generate actual PDF content
        body = (
            f"1 0 obj\n"
            f"<<\n"
            f"/Type /Catalog\n"
            f"/Pages 2 0 R\n"
            f">>\n"
            f"endobj\n"
            f"2 0 obj\n"
            f"<<\n"
            f"/Type /Pages\n"
            f"/Kids [3 0 R]\n"
            f"/Count 1\n"
            f">>\n"
            f"endobj\n"
            f"3 0 obj\n"
            f"<<\n"
            f"/Type /Page\n"
            f"/Parent 2 0 R\n"
            f"/Resources <<\n"
            f"/Font <<\n"
            f"/F1 4 0 R\n"
            f">>\n"
            f">>\n"
            f"/MediaBox [0 0 612 792]\n"
            f"/Contents 5 0 R\n"
            f">>\n"
            f"endobj\n"
            f"4 0 obj\n"
            f"<<\n"
            f"/Type /Font\n"
            f"/Subtype /Type1\n"
            f"/Name /F1\n"
            f"/BaseFont /Helvetica\n"
            f">>\n"
            f"endobj\n"
            f"5 0 obj\n"
            f"<< /Length 123 >>\n"
            f"stream\n"
            f"BT\n"
            f"/F1 24 Tf\n"
            f"100 700 Td\n"
            f"({self.title}) Tj\n"
            f"0 -36 Td\n"
            f"({self.author}) Tj\n"
            f"0 -36 Td\n"
            f"({self.content}) Tj\n"
            f"ET\n"
            f"endstream\n"
            f"endobj\n"
        )
        
        trailer = (
            f"trailer\n"
            f"<<\n"
            f"/Size 6\n"
            f"/Root 1 0 R\n"
            f">>\n"
            f"startxref\n"
            f"0\n"
            f"%%EOF"
        )
        
        return f"{header}{body}{trailer}"
    
    def save(self, path: str) -> bool:
        """
        Save the PDF document to a file.
        
        Args:
            path: The path where to save the document
            
        Returns:
            bool: True if the document was saved successfully, False otherwise
        """
        try:
            # Ensure path has .pdf extension
            if not path.lower().endswith('.pdf'):
                path += '.pdf'
                
            with open(path, 'w') as file:
                file.write(self.generate())
            return True
        except Exception as e:
            print(f"Error saving PDF document: {e}")
            return False


class WordDocument(Document):
    """
    Concrete Product: Word Document implementation.
    """
    def __init__(self, title: str, author: str, content: str = ""):
        """
        Initialize a Word document.
        
        Args:
            title: The title of the document
            author: The author of the document
            content: The content of the document (default is empty string)
        """
        super().__init__(title, author, content)
        self.add_metadata("format", "DOCX")
        self.add_metadata("version", "Office Open XML")
    
    def generate(self) -> str:
        """
        Generate a Word document.
        
        Returns:
            str: An XML representation of a Word document (for demonstration)
        """
        # In a real implementation, this would generate actual DOCX content
        xml = (
            f'<?xml version="1.0" encoding="UTF-8" standalone="yes"?>\n'
            f'<w:document xmlns:w="http://schemas.openxmlformats.org/wordprocessingml/2006/main">\n'
            f'  <w:body>\n'
            f'    <w:p>\n'
            f'      <w:pPr>\n'
            f'        <w:pStyle w:val="Title"/>\n'
            f'      </w:pPr>\n'
            f'      <w:r>\n'
            f'        <w:t>{self.title}</w:t>\n'
            f'      </w:r>\n'
            f'    </w:p>\n'
            f'    <w:p>\n'
            f'      <w:pPr>\n'
            f'        <w:pStyle w:val="Subtitle"/>\n'
            f'      </w:pPr>\n'
            f'      <w:r>\n'
            f'        <w:t>{self.author}</w:t>\n'
            f'      </w:r>\n'
            f'    </w:p>\n'
            f'    <w:p>\n'
            f'      <w:r>\n'
            f'        <w:t>{self.content}</w:t>\n'
            f'      </w:r>\n'
            f'    </w:p>\n'
            f'  </w:body>\n'
            f'</w:document>'
        )
        return xml
    
    def save(self, path: str) -> bool:
        """
        Save the Word document to a file.
        
        Args:
            path: The path where to save the document
            
        Returns:
            bool: True if the document was saved successfully, False otherwise
        """
        try:
            # Ensure path has .docx extension
            if not path.lower().endswith('.docx'):
                path += '.docx'
                
            with open(path, 'w') as file:
                file.write(self.generate())
            return True
        except Exception as e:
            print(f"Error saving Word document: {e}")
            return False


class HTMLDocument(Document):
    """
    Concrete Product: HTML Document implementation.
    """
    def __init__(self, title: str, author: str, content: str = ""):
        """
        Initialize an HTML document.
        
        Args:
            title: The title of the document
            author: The author of the document
            content: The content of the document (default is empty string)
        """
        super().__init__(title, author, content)
        self.add_metadata("format", "HTML")
        self.add_metadata("version", "HTML5")
        self.css = ""
    
    def set_css(self, css: str) -> None:
        """
        Set CSS for the HTML document.
        
        Args:
            css: CSS styles as a string
        """
        self.css = css
    
    def generate(self) -> str:
        """
        Generate an HTML document.
        
        Returns:
            str: An HTML document as a string
        """
        html = (
            f'<!DOCTYPE html>\n'
            f'<html lang="en">\n'
            f'<head>\n'
            f'    <meta charset="UTF-8">\n'
            f'    <meta name="viewport" content="width=device-width, initial-scale=1.0">\n'
            f'    <meta name="author" content="{self.author}">\n'
            f'    <title>{self.title}</title>\n'
        )
        
        if self.css:
            html += f'    <style>\n{self.css}\n    </style>\n'
        
        html += (
            f'</head>\n'
            f'<body>\n'
            f'    <header>\n'
            f'        <h1>{self.title}</h1>\n'
            f'        <p class="author">By {self.author}</p>\n'
            f'    </header>\n'
            f'    <main>\n'
            f'        <div class="content">\n'
            f'            {self.content}\n'
            f'        </div>\n'
            f'    </main>\n'
            f'    <footer>\n'
            f'        <p>Generated with Factory Pattern Demo</p>\n'
            f'    </footer>\n'
            f'</body>\n'
            f'</html>'
        )
        
        return html
    
    def save(self, path: str) -> bool:
        """
        Save the HTML document to a file.
        
        Args:
            path: The path where to save the document
            
        Returns:
            bool: True if the document was saved successfully, False otherwise
        """
        try:
            # Ensure path has .html extension
            if not path.lower().endswith(('.html', '.htm')):
                path += '.html'
                
            with open(path, 'w') as file:
                file.write(self.generate())
            return True
        except Exception as e:
            print(f"Error saving HTML document: {e}")
            return False 